// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countOrders = `-- name: CountOrders :one
SELECT COUNT(*) FROM orders
`

func (q *Queries) CountOrders(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOrders)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, amount, premium, currency, payment, created_at, expiry_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Premium,
		&i.Currency,
		&i.Payment,
		&i.CreatedAt,
		&i.ExpiryAt,
	)
	return i, err
}

const insertOrder = `-- name: InsertOrder :exec
INSERT INTO orders (amount, currency, created_at, expiry_at, premium, payment) VALUES  ($1, $2, $3, $4, $5, $6) RETURNING id
`

type InsertOrderParams struct {
	Amount    float64
	Currency  int32
	CreatedAt time.Time
	ExpiryAt  time.Time
	Premium   float64
	Payment   int32
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) error {
	_, err := q.db.ExecContext(ctx, insertOrder,
		arg.Amount,
		arg.Currency,
		arg.CreatedAt,
		arg.ExpiryAt,
		arg.Premium,
		arg.Payment,
	)
	return err
}

const patchOrder = `-- name: PatchOrder :exec
UPDATE orders SET amount = $1, currency = $2, created_at = $3, expiry_at = $4, premium = $5, payment = $6 WHERE id = $7
`

type PatchOrderParams struct {
	Amount    float64
	Currency  int32
	CreatedAt time.Time
	ExpiryAt  time.Time
	Premium   float64
	Payment   int32
	ID        uuid.UUID
}

func (q *Queries) PatchOrder(ctx context.Context, arg PatchOrderParams) error {
	_, err := q.db.ExecContext(ctx, patchOrder,
		arg.Amount,
		arg.Currency,
		arg.CreatedAt,
		arg.ExpiryAt,
		arg.Premium,
		arg.Payment,
		arg.ID,
	)
	return err
}

const verifyToken = `-- name: VerifyToken :one
SELECT COUNT(*) FROM users WHERE token = $1
`

func (q *Queries) VerifyToken(ctx context.Context, token string) (int64, error) {
	row := q.db.QueryRowContext(ctx, verifyToken, token)
	var count int64
	err := row.Scan(&count)
	return count, err
}
