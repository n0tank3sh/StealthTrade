openapi: '3.0.3'
info:
  title: Stealth Trade api
  version: '0.0.1'
servers:
  - url: https://StealthTrade.exchange/v1

components:
  schemas:
    JSONMessage: 
      type: object
      properties:
        message:
          type: string
    Account:
      type: object
      properties:
        id:
          type: string
        picture:
          type: string
          format: url
        name:
          type: string
    Order: 
      type: object
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: integer
          format: double
          minimum: 0
        premium:
          type: integer
          format: double
          minimum: 0
          maximum: 100
        bid:
          type: boolean
        currency:
          type: string
    OrderId: 
      type: integer
    OrderArray:
      type: array
      items:
        type: object
        properties:
          schema:
            $ref: "#/components/schemas/Order"
paths:
  /orders/{order-id}/trade:
    post:
      tags:
        - orders
        - trade 
      responses:
        '200':
          description: "successfully created a trade"
    get: 
      tags:
        - orders
        - trade
      responses:
          '200':
            description: "succesfully retrieved a trade"
    delete:
      tags:
        - orders
        - trade
      responses:
          '200':
            description: "succesfully deleted a trade"
  /orders/{order-id}/trade/escrow/dispute:
    post: 
      tags: 
       - orders
       - trade
       - escrow
       - dispute
      description: "Raise a dispute"
      responses:
        '201':
          description: "Successfully raised a dispute"
    delete:
      tags: 
        - orders
        - trade 
        - escrow
        - dispute
      description: "Succesfully delete the dispute"
      responses:
        '200':
          description: "Succesfully resolved the dispute"
  /orders/{order-id}/trade/escrow:
    post: 
      tags:
        - orders
        - trade
        - escrow
      description: "start the escrow"
      responses:
        '201': 
          description: "Successfully started an escrow"
    get: 
      tags:
        - orders
        - trade
        - escrow
      description: "get the escrow status"
      parameters:
        - name: id
          in: path
          description: id of the escrow to check the status
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200': 
          description: "Successfully returning the status of the escrow"
          content:
            application/json:
              schema:
                properties:
                  status: 
                    type: string
        '400':
          description: "Bad Request"
        '401':
          description: ""
        '404': 
          description: ""
        
    delete:
      tags:
        - orders
        - trade
        - escrow
      description: "Delete the escrow"
      parameters:
        - name: id
          in: path
          description: id of the escrow to delete
          required: true
          schema: 
            type: string
            format: uuid
      responses:
        '200':
          description: "return the message of deletion"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/JSONMessage"
        '400':
          description: "Bad request"
        '402':
          description: "invalid api key"
        '404': 
          description: "escrow not found"
  /token/generate:
    post: 
      description: "generate a token for the user"
      responses:
        '201': 
          description: "succesfully generated a token"
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string 
                    example: "s0m3th1ngl1k3th1sw1th30char"
  /orders:
    get:
      tags:
        - "orders"
      description: "Get the list of orders"
      parameters:
        - name: sort
          in: query
          schema:
            type: string
        - name: offset
          in: query 
          schema:
            type: integer
            format: integer 
            example: 0
        - name: limit
          in: query
          schema:
            type: integer 
            format: integer
            minimum: 1
            maximum: 50
            example: 10
      responses:
        '200':
          description: "list of orders"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderArray"
    post:
      tags:
      - "orders"
      description: "Create an order"
      parameters: []
      requestBody: 
        description: "Order details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "201":
          description: "Object accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JSONMessage"
  /orders/{order-id}:
    get:
      tags:
        - "orders"
      description: 'Get the list of the orders'
      parameters:
      - name: order-id
        description: ID of the order
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    delete:
      tags:
        - "orders"
      description: "Delete the order with id"
      parameters:
        - name: order-id
          description: ID of the order
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200": 
          description: Sucessfully deleted the object with the uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JSONMessage"