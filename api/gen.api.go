//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Account defines model for Account.
type Account struct {
	Id      *string `json:"id,omitempty"`
	Name    *string `json:"name,omitempty"`
	Picture *string `json:"picture,omitempty"`
}

// JSONMessage defines model for JSONMessage.
type JSONMessage struct {
	Message *string `json:"message,omitempty"`
}

// Order defines model for Order.
type Order struct {
	Amount   *int                `json:"amount,omitempty"`
	Bid      *bool               `json:"bid,omitempty"`
	Currency *string             `json:"currency,omitempty"`
	Id       *openapi_types.UUID `json:"id,omitempty"`
	Premium  *int                `json:"premium,omitempty"`
}

// OrderArray defines model for OrderArray.
type OrderArray = []interface{}

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostOrdersJSONRequestBody defines body for PostOrders for application/json ContentType.
type PostOrdersJSONRequestBody = Order

// PutOrdersOrderIdJSONRequestBody defines body for PutOrdersOrderId for application/json ContentType.
type PutOrdersOrderIdJSONRequestBody = Order

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /orders)
	GetOrders(w http.ResponseWriter, r *http.Request, params GetOrdersParams)

	// (POST /orders)
	PostOrders(w http.ResponseWriter, r *http.Request)

	// (DELETE /orders/{order-id})
	DeleteOrdersOrderId(w http.ResponseWriter, r *http.Request, orderId openapi_types.UUID)

	// (GET /orders/{order-id})
	GetOrdersOrderId(w http.ResponseWriter, r *http.Request, orderId openapi_types.UUID)

	// (PUT /orders/{order-id})
	PutOrdersOrderId(w http.ResponseWriter, r *http.Request, orderId openapi_types.UUID)

	// (PUT /profile/update)
	PutProfileUpdate(w http.ResponseWriter, r *http.Request)

	// (POST /token/generate)
	PostTokenGenerate(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostOrders operation middleware
func (siw *ServerInterfaceWrapper) PostOrders(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostOrders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteOrdersOrderId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrdersOrderId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "order-id" -------------
	var orderId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "order-id", r.PathValue("order-id"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrdersOrderId(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOrdersOrderId operation middleware
func (siw *ServerInterfaceWrapper) GetOrdersOrderId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "order-id" -------------
	var orderId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "order-id", r.PathValue("order-id"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrdersOrderId(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutOrdersOrderId operation middleware
func (siw *ServerInterfaceWrapper) PutOrdersOrderId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "order-id" -------------
	var orderId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "order-id", r.PathValue("order-id"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutOrdersOrderId(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutProfileUpdate operation middleware
func (siw *ServerInterfaceWrapper) PutProfileUpdate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutProfileUpdate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTokenGenerate operation middleware
func (siw *ServerInterfaceWrapper) PostTokenGenerate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTokenGenerate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/orders", wrapper.GetOrders)
	m.HandleFunc("POST "+options.BaseURL+"/orders", wrapper.PostOrders)
	m.HandleFunc("DELETE "+options.BaseURL+"/orders/{order-id}", wrapper.DeleteOrdersOrderId)
	m.HandleFunc("GET "+options.BaseURL+"/orders/{order-id}", wrapper.GetOrdersOrderId)
	m.HandleFunc("PUT "+options.BaseURL+"/orders/{order-id}", wrapper.PutOrdersOrderId)
	m.HandleFunc("PUT "+options.BaseURL+"/profile/update", wrapper.PutProfileUpdate)
	m.HandleFunc("POST "+options.BaseURL+"/token/generate", wrapper.PostTokenGenerate)

	return m
}

type GetOrdersRequestObject struct {
	Params GetOrdersParams
}

type GetOrdersResponseObject interface {
	VisitGetOrdersResponse(w http.ResponseWriter) error
}

type GetOrders200JSONResponse OrderArray

func (response GetOrders200JSONResponse) VisitGetOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostOrdersRequestObject struct {
	Body *PostOrdersJSONRequestBody
}

type PostOrdersResponseObject interface {
	VisitPostOrdersResponse(w http.ResponseWriter) error
}

type PostOrders201JSONResponse JSONMessage

func (response PostOrders201JSONResponse) VisitPostOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrdersOrderIdRequestObject struct {
	OrderId openapi_types.UUID `json:"order-id"`
}

type DeleteOrdersOrderIdResponseObject interface {
	VisitDeleteOrdersOrderIdResponse(w http.ResponseWriter) error
}

type DeleteOrdersOrderId200JSONResponse JSONMessage

func (response DeleteOrdersOrderId200JSONResponse) VisitDeleteOrdersOrderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrdersOrderIdRequestObject struct {
	OrderId openapi_types.UUID `json:"order-id"`
}

type GetOrdersOrderIdResponseObject interface {
	VisitGetOrdersOrderIdResponse(w http.ResponseWriter) error
}

type GetOrdersOrderId200JSONResponse Order

func (response GetOrdersOrderId200JSONResponse) VisitGetOrdersOrderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutOrdersOrderIdRequestObject struct {
	OrderId openapi_types.UUID `json:"order-id"`
	Body    *PutOrdersOrderIdJSONRequestBody
}

type PutOrdersOrderIdResponseObject interface {
	VisitPutOrdersOrderIdResponse(w http.ResponseWriter) error
}

type PutOrdersOrderId200JSONResponse JSONMessage

func (response PutOrdersOrderId200JSONResponse) VisitPutOrdersOrderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutProfileUpdateRequestObject struct {
}

type PutProfileUpdateResponseObject interface {
	VisitPutProfileUpdateResponse(w http.ResponseWriter) error
}

type PutProfileUpdate200JSONResponse Account

func (response PutProfileUpdate200JSONResponse) VisitPutProfileUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTokenGenerateRequestObject struct {
}

type PostTokenGenerateResponseObject interface {
	VisitPostTokenGenerateResponse(w http.ResponseWriter) error
}

type PostTokenGenerate200JSONResponse struct {
	Token *string `json:"token,omitempty"`
}

func (response PostTokenGenerate200JSONResponse) VisitPostTokenGenerateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /orders)
	GetOrders(ctx context.Context, request GetOrdersRequestObject) (GetOrdersResponseObject, error)

	// (POST /orders)
	PostOrders(ctx context.Context, request PostOrdersRequestObject) (PostOrdersResponseObject, error)

	// (DELETE /orders/{order-id})
	DeleteOrdersOrderId(ctx context.Context, request DeleteOrdersOrderIdRequestObject) (DeleteOrdersOrderIdResponseObject, error)

	// (GET /orders/{order-id})
	GetOrdersOrderId(ctx context.Context, request GetOrdersOrderIdRequestObject) (GetOrdersOrderIdResponseObject, error)

	// (PUT /orders/{order-id})
	PutOrdersOrderId(ctx context.Context, request PutOrdersOrderIdRequestObject) (PutOrdersOrderIdResponseObject, error)

	// (PUT /profile/update)
	PutProfileUpdate(ctx context.Context, request PutProfileUpdateRequestObject) (PutProfileUpdateResponseObject, error)

	// (POST /token/generate)
	PostTokenGenerate(ctx context.Context, request PostTokenGenerateRequestObject) (PostTokenGenerateResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetOrders operation middleware
func (sh *strictHandler) GetOrders(w http.ResponseWriter, r *http.Request, params GetOrdersParams) {
	var request GetOrdersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrders(ctx, request.(GetOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrdersResponseObject); ok {
		if err := validResponse.VisitGetOrdersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostOrders operation middleware
func (sh *strictHandler) PostOrders(w http.ResponseWriter, r *http.Request) {
	var request PostOrdersRequestObject

	var body PostOrdersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostOrders(ctx, request.(PostOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostOrders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostOrdersResponseObject); ok {
		if err := validResponse.VisitPostOrdersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOrdersOrderId operation middleware
func (sh *strictHandler) DeleteOrdersOrderId(w http.ResponseWriter, r *http.Request, orderId openapi_types.UUID) {
	var request DeleteOrdersOrderIdRequestObject

	request.OrderId = orderId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrdersOrderId(ctx, request.(DeleteOrdersOrderIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrdersOrderId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteOrdersOrderIdResponseObject); ok {
		if err := validResponse.VisitDeleteOrdersOrderIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOrdersOrderId operation middleware
func (sh *strictHandler) GetOrdersOrderId(w http.ResponseWriter, r *http.Request, orderId openapi_types.UUID) {
	var request GetOrdersOrderIdRequestObject

	request.OrderId = orderId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrdersOrderId(ctx, request.(GetOrdersOrderIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrdersOrderId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrdersOrderIdResponseObject); ok {
		if err := validResponse.VisitGetOrdersOrderIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutOrdersOrderId operation middleware
func (sh *strictHandler) PutOrdersOrderId(w http.ResponseWriter, r *http.Request, orderId openapi_types.UUID) {
	var request PutOrdersOrderIdRequestObject

	request.OrderId = orderId

	var body PutOrdersOrderIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutOrdersOrderId(ctx, request.(PutOrdersOrderIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutOrdersOrderId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutOrdersOrderIdResponseObject); ok {
		if err := validResponse.VisitPutOrdersOrderIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutProfileUpdate operation middleware
func (sh *strictHandler) PutProfileUpdate(w http.ResponseWriter, r *http.Request) {
	var request PutProfileUpdateRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutProfileUpdate(ctx, request.(PutProfileUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutProfileUpdate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutProfileUpdateResponseObject); ok {
		if err := validResponse.VisitPutProfileUpdateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTokenGenerate operation middleware
func (sh *strictHandler) PostTokenGenerate(w http.ResponseWriter, r *http.Request) {
	var request PostTokenGenerateRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostTokenGenerate(ctx, request.(PostTokenGenerateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTokenGenerate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostTokenGenerateResponseObject); ok {
		if err := validResponse.VisitPostTokenGenerateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
